// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/MSex/lab-go-http/app/config"
	"github.com/MSex/lab-go-http/app/data/sqlite"
	"github.com/MSex/lab-go-http/app/logger"
	"github.com/MSex/lab-go-http/app/server"
	"github.com/MSex/lab-go-http/app/server/endpoints/users/get"
	"github.com/MSex/lab-go-http/app/server/endpoints/users/list"
	"github.com/MSex/lab-go-http/app/server/endpoints/users/post"
	"github.com/julienschmidt/httprouter"
	"go.uber.org/zap"
)

// Injectors from wire_build.go:

func injectLogger() (*zap.Logger, error) {
	developmentLogging := config.ProvideDevLogging()
	level := config.ProvideLogLevel()
	appName := config.ProvideAppName()
	buildNumber, err := config.ProvideBuildNumber()
	if err != nil {
		return nil, err
	}
	zapConfig := logger.ProvideLoggerConfig(developmentLogging, level, appName, buildNumber)
	zapLogger, err := logger.ProvideLogger(zapConfig)
	if err != nil {
		return nil, err
	}
	return zapLogger, nil
}

func inject() (*httprouter.Router, error) {
	db, err := sqlite.ProvideConn()
	if err != nil {
		return nil, err
	}
	users := sqlite.ProvideUsers(db)
	developmentLogging := config.ProvideDevLogging()
	level := config.ProvideLogLevel()
	appName := config.ProvideAppName()
	buildNumber, err := config.ProvideBuildNumber()
	if err != nil {
		return nil, err
	}
	zapConfig := logger.ProvideLoggerConfig(developmentLogging, level, appName, buildNumber)
	zapLogger, err := logger.ProvideLogger(zapConfig)
	if err != nil {
		return nil, err
	}
	handler, err := listusers.ProvideHandler(users, zapLogger)
	if err != nil {
		return nil, err
	}
	getusersHandler, err := getusers.ProvideHandler(users, zapLogger)
	if err != nil {
		return nil, err
	}
	postusersHandler, err := postusers.ProvideHandler(users, zapLogger)
	if err != nil {
		return nil, err
	}
	router := server.ProvideRouter(handler, getusersHandler, postusersHandler)
	return router, nil
}
