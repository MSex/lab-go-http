// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package postusers

import (
	io "io"

	httprouter "github.com/julienschmidt/httprouter"

	mock "github.com/stretchr/testify/mock"

	validation "github.com/go-ozzo/ozzo-validation/v4"
)

// RequestHelperMock is an autogenerated mock type for the RequestHelper type
type RequestHelperMock struct {
	mock.Mock
}

// ParseRequest provides a mock function with given fields: pathParams, queryString, body
func (_m *RequestHelperMock) ParseRequest(pathParams httprouter.Params, queryString string, body io.ReadCloser) (*RequestData, error) {
	ret := _m.Called(pathParams, queryString, body)

	var r0 *RequestData
	if rf, ok := ret.Get(0).(func(httprouter.Params, string, io.ReadCloser) *RequestData); ok {
		r0 = rf(pathParams, queryString, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RequestData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(httprouter.Params, string, io.ReadCloser) error); ok {
		r1 = rf(pathParams, queryString, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRequest provides a mock function with given fields: request
func (_m *RequestHelperMock) ValidateRequest(request *RequestData) validation.Errors {
	ret := _m.Called(request)

	var r0 validation.Errors
	if rf, ok := ret.Get(0).(func(*RequestData) validation.Errors); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validation.Errors)
		}
	}

	return r0
}
